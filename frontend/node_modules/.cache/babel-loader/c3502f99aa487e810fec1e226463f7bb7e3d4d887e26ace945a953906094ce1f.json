{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\InvertedIndexSearch\\\\frontend\\\\src\\\\Pages\\\\searchPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// BTree class to store products by ID\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass BTree {\n  constructor() {\n    this.products = new Map();\n  }\n  insert(key, product) {\n    this.products.set(key, product);\n  }\n  search(key) {\n    return this.products.get(key);\n  }\n}\n\n// InvertedIndex class to map keywords to product IDs\nclass InvertedIndex {\n  constructor() {\n    this.index = new Map();\n  }\n  add(term, productId) {\n    if (!this.index.has(term)) {\n      this.index.set(term, new Set());\n    }\n    this.index.get(term).add(productId);\n  }\n  search(term) {\n    return this.index.get(term) || new Set();\n  }\n}\n\n// HybridIndex class that combines BTree and InvertedIndex\nclass HybridIndex {\n  constructor() {\n    this.bTree = new BTree();\n    this.invertedIndex = new InvertedIndex();\n  }\n  addProduct(product) {\n    // Add product to B-Tree by ID\n    this.bTree.insert(product.id, product);\n\n    // Add product to Inverted Index using keywords\n    product.keywords.forEach(keyword => {\n      this.invertedIndex.add(keyword.toLowerCase(), product.id);\n    });\n  }\n  search(query) {\n    const keywords = query.toLowerCase().split(' ').filter(Boolean);\n    const resultIds = new Set();\n    keywords.forEach(keyword => {\n      const ids = this.invertedIndex.search(keyword);\n      ids.forEach(id => resultIds.add(id));\n    });\n    return Array.from(resultIds).map(id => this.bTree.search(id));\n  }\n}\nconst ProductSearch = () => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const hybridIndex = new HybridIndex();\n\n  // Example product data\n  const products = [{\n    id: 1,\n    name: 'iPhone 14',\n    keywords: ['smartphone', 'apple', 'iphone']\n  }, {\n    id: 2,\n    name: 'MacBook Air',\n    keywords: ['laptop', 'apple', 'macbook']\n  }, {\n    id: 3,\n    name: 'Samsung Galaxy S23',\n    keywords: ['smartphone', 'samsung', 'galaxy']\n  }];\n\n  // Initialize the hybrid index with products\n  useEffect(() => {\n    products.forEach(product => hybridIndex.addProduct(product));\n  }, [hybridIndex]);\n\n  // Handle search input and results\n  const searchProduct = event => {\n    setQuery(event.target.value);\n    const searchResults = hybridIndex.search(event.target.value);\n    setResults(searchResults);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Product Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: searchProduct,\n      placeholder: \"Search for a product...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: results.length > 0 ? results.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: product.name\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No products found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(ProductSearch, \"nfFCkWxd9oyjBdRn730zz5KxriU=\");\n_c = ProductSearch;\nexport default ProductSearch;\nvar _c;\n$RefreshReg$(_c, \"ProductSearch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","BTree","constructor","products","Map","insert","key","product","set","search","get","InvertedIndex","index","add","term","productId","has","Set","HybridIndex","bTree","invertedIndex","addProduct","id","keywords","forEach","keyword","toLowerCase","query","split","filter","Boolean","resultIds","ids","Array","from","map","ProductSearch","_s","setQuery","results","setResults","hybridIndex","name","searchProduct","event","target","value","searchResults","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","length","_c","$RefreshReg$"],"sources":["D:/Projects/InvertedIndexSearch/frontend/src/Pages/searchPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n// BTree class to store products by ID\r\nclass BTree {\r\n    constructor() {\r\n        this.products = new Map();\r\n    }\r\n\r\n    insert(key, product) {\r\n        this.products.set(key, product);\r\n    }\r\n\r\n    search(key) {\r\n        return this.products.get(key);\r\n    }\r\n}\r\n\r\n// InvertedIndex class to map keywords to product IDs\r\nclass InvertedIndex {\r\n    constructor() {\r\n        this.index = new Map();\r\n    }\r\n\r\n    add(term, productId) {\r\n        if (!this.index.has(term)) {\r\n            this.index.set(term, new Set());\r\n        }\r\n        this.index.get(term).add(productId);\r\n    }\r\n\r\n    search(term) {\r\n        return this.index.get(term) || new Set();\r\n    }\r\n}\r\n\r\n// HybridIndex class that combines BTree and InvertedIndex\r\nclass HybridIndex {\r\n    constructor() {\r\n        this.bTree = new BTree();\r\n        this.invertedIndex = new InvertedIndex();\r\n    }\r\n\r\n    addProduct(product) {\r\n        // Add product to B-Tree by ID\r\n        this.bTree.insert(product.id, product);\r\n\r\n        // Add product to Inverted Index using keywords\r\n        product.keywords.forEach(keyword => {\r\n            this.invertedIndex.add(keyword.toLowerCase(), product.id);\r\n        });\r\n    }\r\n\r\n    search(query) {\r\n        const keywords = query.toLowerCase().split(' ').filter(Boolean);\r\n        const resultIds = new Set();\r\n\r\n        keywords.forEach(keyword => {\r\n            const ids = this.invertedIndex.search(keyword);\r\n            ids.forEach(id => resultIds.add(id));\r\n        });\r\n\r\n        return Array.from(resultIds).map(id => this.bTree.search(id));\r\n    }\r\n}\r\n\r\nconst ProductSearch = () => {\r\n    const [query, setQuery] = useState('');\r\n    const [results, setResults] = useState([]);\r\n    \r\n    const hybridIndex = new HybridIndex();\r\n\r\n    // Example product data\r\n    const products = [\r\n        { id: 1, name: 'iPhone 14', keywords: ['smartphone', 'apple', 'iphone'] },\r\n        { id: 2, name: 'MacBook Air', keywords: ['laptop', 'apple', 'macbook'] },\r\n        { id: 3, name: 'Samsung Galaxy S23', keywords: ['smartphone', 'samsung', 'galaxy'] },\r\n    ];\r\n\r\n    // Initialize the hybrid index with products\r\n    useEffect(() => {\r\n        products.forEach(product => hybridIndex.addProduct(product));\r\n    }, [hybridIndex]);\r\n\r\n    // Handle search input and results\r\n    const searchProduct = (event) => {\r\n        setQuery(event.target.value);\r\n        const searchResults = hybridIndex.search(event.target.value);\r\n        setResults(searchResults);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Product Search</h1>\r\n            <input\r\n                type=\"text\"\r\n                value={query}\r\n                onChange={searchProduct}\r\n                placeholder=\"Search for a product...\"\r\n            />\r\n            <ul>\r\n                {results.length > 0 ? (\r\n                    results.map((product) => (\r\n                        <li key={product.id}>{product.name}</li>\r\n                    ))\r\n                ) : (\r\n                    <li>No products found</li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductSearch;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,KAAK,CAAC;EACRC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC7B;EAEAC,MAAMA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACjB,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACF,GAAG,EAAEC,OAAO,CAAC;EACnC;EAEAE,MAAMA,CAACH,GAAG,EAAE;IACR,OAAO,IAAI,CAACH,QAAQ,CAACO,GAAG,CAACJ,GAAG,CAAC;EACjC;AACJ;;AAEA;AACA,MAAMK,aAAa,CAAC;EAChBT,WAAWA,CAAA,EAAG;IACV,IAAI,CAACU,KAAK,GAAG,IAAIR,GAAG,CAAC,CAAC;EAC1B;EAEAS,GAAGA,CAACC,IAAI,EAAEC,SAAS,EAAE;IACjB,IAAI,CAAC,IAAI,CAACH,KAAK,CAACI,GAAG,CAACF,IAAI,CAAC,EAAE;MACvB,IAAI,CAACF,KAAK,CAACJ,GAAG,CAACM,IAAI,EAAE,IAAIG,GAAG,CAAC,CAAC,CAAC;IACnC;IACA,IAAI,CAACL,KAAK,CAACF,GAAG,CAACI,IAAI,CAAC,CAACD,GAAG,CAACE,SAAS,CAAC;EACvC;EAEAN,MAAMA,CAACK,IAAI,EAAE;IACT,OAAO,IAAI,CAACF,KAAK,CAACF,GAAG,CAACI,IAAI,CAAC,IAAI,IAAIG,GAAG,CAAC,CAAC;EAC5C;AACJ;;AAEA;AACA,MAAMC,WAAW,CAAC;EACdhB,WAAWA,CAAA,EAAG;IACV,IAAI,CAACiB,KAAK,GAAG,IAAIlB,KAAK,CAAC,CAAC;IACxB,IAAI,CAACmB,aAAa,GAAG,IAAIT,aAAa,CAAC,CAAC;EAC5C;EAEAU,UAAUA,CAACd,OAAO,EAAE;IAChB;IACA,IAAI,CAACY,KAAK,CAACd,MAAM,CAACE,OAAO,CAACe,EAAE,EAAEf,OAAO,CAAC;;IAEtC;IACAA,OAAO,CAACgB,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;MAChC,IAAI,CAACL,aAAa,CAACP,GAAG,CAACY,OAAO,CAACC,WAAW,CAAC,CAAC,EAAEnB,OAAO,CAACe,EAAE,CAAC;IAC7D,CAAC,CAAC;EACN;EAEAb,MAAMA,CAACkB,KAAK,EAAE;IACV,MAAMJ,QAAQ,GAAGI,KAAK,CAACD,WAAW,CAAC,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;IAC/D,MAAMC,SAAS,GAAG,IAAId,GAAG,CAAC,CAAC;IAE3BM,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;MACxB,MAAMO,GAAG,GAAG,IAAI,CAACZ,aAAa,CAACX,MAAM,CAACgB,OAAO,CAAC;MAC9CO,GAAG,CAACR,OAAO,CAACF,EAAE,IAAIS,SAAS,CAAClB,GAAG,CAACS,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF,OAAOW,KAAK,CAACC,IAAI,CAACH,SAAS,CAAC,CAACI,GAAG,CAACb,EAAE,IAAI,IAAI,CAACH,KAAK,CAACV,MAAM,CAACa,EAAE,CAAC,CAAC;EACjE;AACJ;AAEA,MAAMc,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACV,KAAK,EAAEW,QAAQ,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC0C,OAAO,EAAEC,UAAU,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAM4C,WAAW,GAAG,IAAIvB,WAAW,CAAC,CAAC;;EAErC;EACA,MAAMf,QAAQ,GAAG,CACb;IAAEmB,EAAE,EAAE,CAAC;IAAEoB,IAAI,EAAE,WAAW;IAAEnB,QAAQ,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,QAAQ;EAAE,CAAC,EACzE;IAAED,EAAE,EAAE,CAAC;IAAEoB,IAAI,EAAE,aAAa;IAAEnB,QAAQ,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS;EAAE,CAAC,EACxE;IAAED,EAAE,EAAE,CAAC;IAAEoB,IAAI,EAAE,oBAAoB;IAAEnB,QAAQ,EAAE,CAAC,YAAY,EAAE,SAAS,EAAE,QAAQ;EAAE,CAAC,CACvF;;EAED;EACAzB,SAAS,CAAC,MAAM;IACZK,QAAQ,CAACqB,OAAO,CAACjB,OAAO,IAAIkC,WAAW,CAACpB,UAAU,CAACd,OAAO,CAAC,CAAC;EAChE,CAAC,EAAE,CAACkC,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAME,aAAa,GAAIC,KAAK,IAAK;IAC7BN,QAAQ,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAC5B,MAAMC,aAAa,GAAGN,WAAW,CAAChC,MAAM,CAACmC,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAC5DN,UAAU,CAACO,aAAa,CAAC;EAC7B,CAAC;EAED,oBACI/C,OAAA;IAAAgD,QAAA,gBACIhD,OAAA;MAAAgD,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBpD,OAAA;MACIqD,IAAI,EAAC,MAAM;MACXP,KAAK,EAAEnB,KAAM;MACb2B,QAAQ,EAAEX,aAAc;MACxBY,WAAW,EAAC;IAAyB;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACFpD,OAAA;MAAAgD,QAAA,EACKT,OAAO,CAACiB,MAAM,GAAG,CAAC,GACfjB,OAAO,CAACJ,GAAG,CAAE5B,OAAO,iBAChBP,OAAA;QAAAgD,QAAA,EAAsBzC,OAAO,CAACmC;MAAI,GAAzBnC,OAAO,CAACe,EAAE;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoB,CAC1C,CAAC,gBAEFpD,OAAA;QAAAgD,QAAA,EAAI;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAC5B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACf,EAAA,CA7CID,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AA+CnB,eAAeA,aAAa;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}