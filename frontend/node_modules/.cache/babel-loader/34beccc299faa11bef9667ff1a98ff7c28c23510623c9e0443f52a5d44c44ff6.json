{"ast":null,"code":"class BTree {\n  constructor() {\n    this.products = new Map();\n  }\n  insert(key, product) {\n    this.products.set(key, product);\n  }\n  search(key) {\n    return this.products.get(key);\n  }\n}\nclass InvertedIndex {\n  constructor() {\n    this.index = new Map();\n  }\n  add(term, productId) {\n    if (!this.index.has(term)) {\n      this.index.set(term, new Set());\n    }\n    this.index.get(term).add(productId);\n  }\n  search(term) {\n    return this.index.get(term) || new Set();\n  }\n}\nclass HybridIndex {\n  constructor() {\n    this.bTree = new BTree();\n    this.invertedIndex = new InvertedIndex();\n    this.productsByName = [];\n  }\n  addProduct(product) {\n    // Add product to B-Tree by ID\n    this.bTree.insert(product.id, product);\n\n    // Add product to Inverted Index using keywords\n    product.keywords.forEach(keyword => {\n      this.invertedIndex.add(keyword.toLowerCase(), product.id);\n    });\n\n    // Store products for regex-based search by name\n    this.productsByName.push(product);\n  }\n  search(query) {\n    const lowercaseQuery = query.toLowerCase();\n    const regex = new RegExp(lowercaseQuery, \"i\");\n    const nameMatches = this.productsByName.filter(product => regex.test(product.name));\n    const keywords = lowercaseQuery.split(\" \").filter(Boolean);\n    const resultIds = new Set();\n    keywords.forEach(keyword => {\n      const ids = this.invertedIndex.search(keyword);\n      ids.forEach(id => resultIds.add(id));\n    });\n    let result = Array.from(resultIds).map(id => this.bTree.search(id));\n    return nameMatches.length > result.length ? nameMatches : result;\n  }\n}\nconst hybridIndex = new HybridIndex();\nexport default hybridIndex;","map":{"version":3,"names":["BTree","constructor","products","Map","insert","key","product","set","search","get","InvertedIndex","index","add","term","productId","has","Set","HybridIndex","bTree","invertedIndex","productsByName","addProduct","id","keywords","forEach","keyword","toLowerCase","push","query","lowercaseQuery","regex","RegExp","nameMatches","filter","test","name","split","Boolean","resultIds","ids","result","Array","from","map","length","hybridIndex"],"sources":["C:/Users/SUBHADIP MANDAL/OneDrive/Pictures/DSA LAB PROJECT/Hybrid_Indexing_Search/frontend/src/Pages/shoppingPage/hybridIndex.js"],"sourcesContent":["\r\nclass BTree {\r\n    constructor() {\r\n      this.products = new Map();\r\n    }\r\n  \r\n    insert(key, product) {\r\n      this.products.set(key, product);\r\n    }\r\n  \r\n    search(key) {\r\n      return this.products.get(key);\r\n    }\r\n  }\r\n  \r\n \r\n  class InvertedIndex {\r\n    constructor() {\r\n      this.index = new Map();\r\n    }\r\n  \r\n    add(term, productId) {\r\n      if (!this.index.has(term)) {\r\n        this.index.set(term, new Set());\r\n      }\r\n      this.index.get(term).add(productId);\r\n    }\r\n    search(term) {\r\n      return this.index.get(term) || new Set();\r\n    }\r\n  }\r\n  \r\n  \r\n  class HybridIndex {\r\n    constructor() {\r\n      this.bTree = new BTree();\r\n      this.invertedIndex = new InvertedIndex();\r\n      this.productsByName = [];\r\n    }\r\n  \r\n    addProduct(product) {\r\n      // Add product to B-Tree by ID\r\n      this.bTree.insert(product.id, product);\r\n  \r\n      // Add product to Inverted Index using keywords\r\n      product.keywords.forEach((keyword) => {\r\n        this.invertedIndex.add(keyword.toLowerCase(), product.id);\r\n      });\r\n  \r\n      // Store products for regex-based search by name\r\n      this.productsByName.push(product);\r\n    }\r\n  \r\n    search(query) {\r\n      const lowercaseQuery = query.toLowerCase();\r\n  \r\n      const regex = new RegExp(lowercaseQuery, \"i\");\r\n      const nameMatches = this.productsByName.filter((product) =>\r\n        regex.test(product.name)\r\n      );\r\n  \r\n      const keywords = lowercaseQuery.split(\" \").filter(Boolean);\r\n      const resultIds = new Set();\r\n  \r\n      keywords.forEach((keyword) => {\r\n        const ids = this.invertedIndex.search(keyword);\r\n        ids.forEach((id) => resultIds.add(id));\r\n      });\r\n  \r\n      let result = Array.from(resultIds).map((id) => this.bTree.search(id));\r\n      return nameMatches.length > result.length ? nameMatches : result;\r\n    }\r\n  }\r\n  \r\n  \r\n  const hybridIndex = new HybridIndex();\r\n  \r\n  export default hybridIndex;\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}